{"version":3,"sources":["components/InputField.js","components/RenderList.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["InputField","input","setInput","list","setList","id","type","className","required","autoComplete","value","onChange","e","target","htmlFor","align","disabled","onClick","preventDefault","trim","length","mod","v4","date","Date","obj","date_time","toLocaleDateString","toLocaleTimeString","localStorage","setItem","JSON","stringify","clear","RenderList","map","li","index","key","removeItem","updateList","filter","l","deleteItem","Main","useState","useEffect","i","parse","getItem","prevList","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yRAwEeA,G,MApEI,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAkC3C,OACE,yBAAKC,GAAG,gBACN,8BACE,2BACEC,KAAK,OACLC,UAAU,WACVF,GAAG,MACHG,UAAQ,EACRC,aAAa,MACbC,MAAOT,EACPU,SA3CS,SAAAC,GACfV,EAASU,EAAEC,OAAOH,UA4Cd,2BAAOI,QAAQ,OACb,kDAGF,yBAAKP,UAAU,cAAcQ,MAAM,UACjC,4BACET,KAAK,SACLC,UAAU,MACVS,UAAWf,EACXgB,QAlDQ,SAAAL,GAEhB,GADAA,EAAEM,iBACEjB,GAAiC,IAAxBA,EAAMkB,OAAOC,OAAc,CACtC,IAAMC,EAAMpB,EAAMkB,OACZd,EAAKiB,cAELC,EAAO,IAAIC,KAIXC,EAAM,CACVpB,KACAqB,UAJAH,EAAKI,qBAAuB,IAAMJ,EAAKK,qBAKvClB,MAAOW,GAGTjB,EAAQ,CAACqB,GAAF,mBAAUtB,KACjB0B,aAAaC,QAAQzB,EAAI0B,KAAKC,UAAUP,IACxCvB,EAAS,OA4BL,eAQA,4BAAQI,KAAK,SAASC,UAAU,QAAQU,QAhC9B,SAAAL,GAChBA,EAAEM,iBACFd,EAAQ,IACRyB,aAAaI,UA6BP,cCtCKC,EAvBI,SAAC,GAAuB,IAArB/B,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAQ1B,OACE,wBAAIG,UAAU,aACXJ,EAAKgC,KAAI,SAACC,EAAIC,GACb,OACE,wBAAIC,IAAKF,EAAG/B,IACV,4BAAK+B,EAAG1B,OACR,uCAAa0B,EAAGV,WAChB,4BAAQT,QAAS,kBAbR,SAAAZ,GACjBwB,aAAaU,WAAWlC,GACxB,IAAMmC,EAAarC,EAAKsC,QAAO,SAAAC,GAAC,OAAIA,EAAErC,KAAOA,KAC7CD,EAAQ,YAAIoC,IAUmBG,CAAWP,EAAG/B,MAArC,gBCeGuC,EA5BF,WAAO,IAAD,EACSC,mBAAS,IADlB,mBACV5C,EADU,KACHC,EADG,OAEO2C,mBAAS,IAFhB,mBAEV1C,EAFU,KAEJC,EAFI,KAajB,OATA0C,qBAAU,WACR,IADe,IAAD,WACLC,GACP,IAAM1C,EAAKwB,aAAaS,IAAIS,GACtBtB,EAAMM,KAAKiB,MAAMnB,aAAaoB,QAAQ5C,IAE5CD,GAAQ,SAAA8C,GAAQ,OAAKzB,GAAL,mBAAayB,QAJtBH,EAAI,EAAGA,EAAIlB,aAAaT,OAAQ2B,IAAM,EAAtCA,KAMR,IAGD,6BACE,yCACA,kBAAC,EAAD,CACE9C,MAAOA,EACPC,SAAUA,EACVC,KAAMA,EACNC,QAASA,IAGX,kBAAC,EAAD,CAAYD,KAAMA,EAAMC,QAASA,MCdxB+C,MARf,WACE,OACE,yBAAK5C,UAAU,OACb,kBAAC,EAAD,QCIc6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a36b6031.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { v4 } from \"uuid\";\r\nimport \"./InputField.css\";\r\n\r\nconst InputField = ({ input, setInput, list, setList }) => {\r\n  const getInput = e => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  const addToList = e => {\r\n    e.preventDefault();\r\n    if (input && input.trim().length !== 0) {\r\n      const mod = input.trim();\r\n      const id = v4();\r\n\r\n      const date = new Date();\r\n      const date_time =\r\n        date.toLocaleDateString() + \" \" + date.toLocaleTimeString();\r\n\r\n      const obj = {\r\n        id,\r\n        date_time,\r\n        value: mod,\r\n      };\r\n\r\n      setList([obj, ...list]);\r\n      localStorage.setItem(id, JSON.stringify(obj));\r\n      setInput(\"\");\r\n    }\r\n  };\r\n\r\n  const clearList = e => {\r\n    e.preventDefault();\r\n    setList([]);\r\n    localStorage.clear();\r\n  };\r\n\r\n\r\n  return (\r\n    <div id=\"form-control\">\r\n      <form>\r\n        <input\r\n          type=\"text\"\r\n          className=\"question\"\r\n          id=\"nme\"\r\n          required\r\n          autoComplete=\"off\"\r\n          value={input}\r\n          onChange={getInput}\r\n        />\r\n        <label htmlFor=\"nme\">\r\n          <span>Write Something</span>\r\n        </label>\r\n\r\n        <div className=\"button_cont\" align=\"center\">\r\n          <button\r\n            type=\"submit\"\r\n            className=\"add\"\r\n            disabled={!input}\r\n            onClick={addToList}>\r\n            Add to List\r\n          </button>\r\n\r\n          <button type=\"submit\" className=\"clear\" onClick={clearList}>\r\n            Clear\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputField;\r\n","import React from \"react\";\r\n\r\nconst RenderList = ({ list, setList }) => {\r\n  \r\n  const deleteItem = id => {\r\n    localStorage.removeItem(id);\r\n    const updateList = list.filter(l => l.id !== id);\r\n    setList([...updateList]);\r\n  };\r\n\r\n  return (\r\n    <ul className=\"tilesWrap\">\r\n      {list.map((li, index) => {\r\n        return (\r\n          <li key={li.id}>\r\n            <h2>{li.value}</h2>\r\n            <p>added at {li.date_time}</p>\r\n            <button onClick={() => deleteItem(li.id)}>DELETE</button>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default RenderList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport InputField from \"./InputField\";\r\nimport RenderList from \"./RenderList\";\r\n\r\nconst Main = () => {\r\n  const [input, setInput] = useState(\"\");\r\n  const [list, setList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n      const id = localStorage.key(i);\r\n      const obj = JSON.parse(localStorage.getItem(id));\r\n\r\n      setList(prevList => [obj, ...prevList]);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>TODO LIST</h1>\r\n      <InputField\r\n        input={input}\r\n        setInput={setInput}\r\n        list={list}\r\n        setList={setList}\r\n      />\r\n\r\n      <RenderList list={list} setList={setList} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Main from \"./components/Main\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}